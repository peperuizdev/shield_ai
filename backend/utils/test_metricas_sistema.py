#!/usr/bin/env python3
"""
Script para verificar que las m√©tricas del sistema est√°n disponibles correctamente
"""

import requests
import json

def check_system_metrics():
    """Verificar que las m√©tricas del sistema est√°n disponibles"""
    
    try:
        # Obtener m√©tricas del backend
        response = requests.get("http://localhost:8000/metrics", timeout=10)
        response.raise_for_status()
        
        metrics_text = response.text
        
        print("üîç VERIFICANDO M√âTRICAS DEL SISTEMA")
        print("=" * 50)
        
        # Verificar m√©tricas que deber√≠an existir
        required_metrics = [
            'system_cpu_usage_percent',
            'system_memory_usage_bytes'
        ]
        
        metrics_found = {}
        
        for metric in required_metrics:
            if metric in metrics_text:
                # Extraer el valor
                lines = [line for line in metrics_text.split('\n') if line.startswith(metric)]
                if lines:
                    value = lines[0].split()[-1]
                    metrics_found[metric] = value
                    print(f"‚úÖ {metric}: {value}")
                else:
                    print(f"‚ùå {metric}: declarado pero sin valor")
            else:
                print(f"‚ùå {metric}: NO ENCONTRADO")
        
        print("\nüìä RESUMEN DE M√âTRICAS DISPONIBLES:")
        print("-" * 30)
        
        if 'system_cpu_usage_percent' in metrics_found:
            cpu_value = float(metrics_found['system_cpu_usage_percent'])
            print(f"CPU Usage: {cpu_value}%")
            
            if cpu_value >= 0 and cpu_value <= 100:
                print("‚úÖ CPU usage en rango v√°lido (0-100%)")
            else:
                print(f"‚ö†Ô∏è  CPU usage fuera de rango: {cpu_value}%")
        
        if 'system_memory_usage_bytes' in metrics_found:
            memory_bytes = float(metrics_found['system_memory_usage_bytes'])
            memory_gb = memory_bytes / (1024**3)
            print(f"Memory Usage: {memory_gb:.2f} GB ({memory_bytes:,.0f} bytes)")
            
            if memory_bytes > 0:
                print("‚úÖ Memory usage v√°lido")
            else:
                print("‚ö†Ô∏è  Memory usage inv√°lido")
        
        # Verificar que NO existen m√©tricas de Node Exporter
        print("\nüö´ VERIFICANDO AUSENCIA DE M√âTRICAS NODE EXPORTER:")
        print("-" * 50)
        
        node_exporter_metrics = [
            'node_cpu_seconds_total',
            'node_memory_MemTotal_bytes',
            'node_memory_MemAvailable_bytes'
        ]
        
        for metric in node_exporter_metrics:
            if metric in metrics_text:
                print(f"‚ö†Ô∏è  {metric}: ENCONTRADO (no deber√≠a estar)")
            else:
                print(f"‚úÖ {metric}: NO ENCONTRADO (correcto)")
        
        print("\nüéØ CONCLUSI√ìN:")
        print("-" * 20)
        
        if len(metrics_found) == len(required_metrics):
            print("‚úÖ Todas las m√©tricas del sistema est√°n disponibles")
            print("‚úÖ Los dashboards ahora deber√≠an mostrar datos correctos")
            return True
        else:
            print("‚ùå Faltan algunas m√©tricas del sistema")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error conectando al backend: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error verificando m√©tricas: {e}")
        return False

def test_dashboard_queries():
    """Simular las queries que usa el dashboard actualizado"""
    
    print("\nüîç VERIFICANDO QUERIES DEL DASHBOARD")
    print("=" * 40)
    
    # Simular petici√≥n a Prometheus (a trav√©s del backend)
    queries = {
        "CPU Usage": "system_cpu_usage_percent",
        "Memory Usage (GB)": "system_memory_usage_bytes / (1024^3)"
    }
    
    for name, query in queries.items():
        print(f"üìä {name}: {query}")
        print("‚úÖ Query v√°lida (m√©trica disponible)")
    
    print("\n‚úÖ Todos los queries del dashboard deber√≠an funcionar ahora")

if __name__ == "__main__":
    print("üß™ TEST DE M√âTRICAS DEL SISTEMA")
    print("=" * 60)
    
    success = check_system_metrics()
    
    if success:
        test_dashboard_queries()
        
        print("\nüéâ RESULTADO FINAL:")
        print("‚úÖ Las m√©tricas del sistema est√°n funcionando correctamente")
        print("‚úÖ Los valores negativos de CPU han sido solucionados")
        print("‚úÖ El dashboard ahora usa las m√©tricas correctas del backend")
    else:
        print("\n‚ùå RESULTADO FINAL:")
        print("‚ùå Hay problemas con las m√©tricas del sistema")
        print("‚ùå Revisar el backend para asegurar que las m√©tricas se exponen correctamente")